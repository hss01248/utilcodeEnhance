package com.hss01248.basewebview.history.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BROWSER_HISTORY_INFO".
*/
public class BrowserHistoryInfoDao extends AbstractDao<BrowserHistoryInfo, Long> {

    public static final String TABLENAME = "BROWSER_HISTORY_INFO";

    /**
     * Properties of entity BrowserHistoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", false, "URL");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property IsCollect = new Property(2, int.class, "isCollect", false, "IS_COLLECT");
        public final static Property IconUrl = new Property(3, String.class, "iconUrl", false, "ICON_URL");
        public final static Property UpdateTime = new Property(4, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property ViewTimes = new Property(5, long.class, "viewTimes", false, "VIEW_TIMES");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Group = new Property(7, String.class, "group", false, "GROUP");
        public final static Property HasSynced = new Property(8, int.class, "hasSynced", false, "HAS_SYNCED");
    }


    public BrowserHistoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BrowserHistoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BROWSER_HISTORY_INFO\" (" + //
                "\"URL\" TEXT," + // 0: url
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: id
                "\"IS_COLLECT\" INTEGER NOT NULL ," + // 2: isCollect
                "\"ICON_URL\" TEXT," + // 3: iconUrl
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 4: updateTime
                "\"VIEW_TIMES\" INTEGER NOT NULL ," + // 5: viewTimes
                "\"TITLE\" TEXT," + // 6: title
                "\"GROUP\" TEXT," + // 7: group
                "\"HAS_SYNCED\" INTEGER NOT NULL );"); // 8: hasSynced
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BROWSER_HISTORY_INFO_URL ON \"BROWSER_HISTORY_INFO\"" +
                " (\"URL\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_BROWSER_HISTORY_INFO_UPDATE_TIME ON \"BROWSER_HISTORY_INFO\"" +
                " (\"UPDATE_TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BROWSER_HISTORY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrowserHistoryInfo entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindLong(3, entity.getIsCollect());
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(4, iconUrl);
        }
        stmt.bindLong(5, entity.getUpdateTime());
        stmt.bindLong(6, entity.getViewTimes());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(8, group);
        }
        stmt.bindLong(9, entity.getHasSynced());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrowserHistoryInfo entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
        stmt.bindLong(3, entity.getIsCollect());
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(4, iconUrl);
        }
        stmt.bindLong(5, entity.getUpdateTime());
        stmt.bindLong(6, entity.getViewTimes());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(8, group);
        }
        stmt.bindLong(9, entity.getHasSynced());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public BrowserHistoryInfo readEntity(Cursor cursor, int offset) {
        BrowserHistoryInfo entity = new BrowserHistoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.getInt(offset + 2), // isCollect
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // iconUrl
            cursor.getLong(offset + 4), // updateTime
            cursor.getLong(offset + 5), // viewTimes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // group
            cursor.getInt(offset + 8) // hasSynced
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrowserHistoryInfo entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIsCollect(cursor.getInt(offset + 2));
        entity.setIconUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.getLong(offset + 4));
        entity.setViewTimes(cursor.getLong(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroup(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasSynced(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BrowserHistoryInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BrowserHistoryInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BrowserHistoryInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
