package com.hss.downloader.download.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hss.downloader.download.SubFolderCount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUB_FOLDER_COUNT".
*/
public class SubFolderCountDao extends AbstractDao<SubFolderCount, String> {

    public static final String TABLENAME = "SUB_FOLDER_COUNT";

    /**
     * Properties of entity SubFolderCount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DirPath = new Property(0, String.class, "dirPath", true, "DIR_PATH");
        public final static Property Count = new Property(1, Integer.class, "count", false, "COUNT");
    }


    public SubFolderCountDao(DaoConfig config) {
        super(config);
    }
    
    public SubFolderCountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUB_FOLDER_COUNT\" (" + //
                "\"DIR_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: dirPath
                "\"COUNT\" INTEGER);"); // 1: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUB_FOLDER_COUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubFolderCount entity) {
        stmt.clearBindings();
 
        String dirPath = entity.getDirPath();
        if (dirPath != null) {
            stmt.bindString(1, dirPath);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(2, count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubFolderCount entity) {
        stmt.clearBindings();
 
        String dirPath = entity.getDirPath();
        if (dirPath != null) {
            stmt.bindString(1, dirPath);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(2, count);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SubFolderCount readEntity(Cursor cursor, int offset) {
        SubFolderCount entity = new SubFolderCount( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dirPath
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubFolderCount entity, int offset) {
        entity.setDirPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SubFolderCount entity, long rowId) {
        return entity.getDirPath();
    }
    
    @Override
    public String getKey(SubFolderCount entity) {
        if(entity != null) {
            return entity.getDirPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubFolderCount entity) {
        return entity.getDirPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
